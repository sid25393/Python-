# ## Import Libraries
# 

# In[73]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
get_ipython().magic('matplotlib inline')


# ## The Data
# 
# 

# In[74]:


train = pd.read_csv('titanic_train.csv')


# In[75]:


train.head()


# # Exploratory Data Analysis
# 
# 
# 
# ## Missing Data
# 
# 

# In[76]:


sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')


# Roughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. Looking at the Cabin column, it looks like we are just missing too much of that data to do something useful with at a basic level. We'll probably drop this later, or change it to another feature like "Cabin Known: 1 or 0"
# 
# 

# In[77]:


sns.set_style('whitegrid')
sns.countplot(x='Survived',data=train,palette='RdBu_r')


# In[78]:


sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Sex',data=train,palette='RdBu_r')


# In[79]:


sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Pclass',data=train,palette='rainbow')


# In[80]:


sns.distplot(train['Age'].dropna(),kde=False,color='darkred',bins=30)


# In[81]:


train['Age'].hist(bins=30,color='darkred',alpha=0.7)


# In[82]:


sns.countplot(x='SibSp',data=train)


# In[83]:


train['Fare'].hist(color='green',bins=40,figsize=(8,4))


# ____
# ### Cufflinks for plots
# ___
#  

# In[84]:


import cufflinks as cf
cf.go_offline()


# In[85]:


train['Fare'].iplot(kind='hist',bins=30,color='green')


# ___
# ## Data Cleaning
#
# 

# In[86]:


plt.figure(figsize=(12, 7))
sns.boxplot(x='Pclass',y='Age',data=train,palette='winter')


# We can see the wealthier passengers in the higher classes tend to be older, which makes sense. We'll use these average age values to impute based on Pclass for Age.

# In[87]:


def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]
    
    if pd.isnull(Age):

        if Pclass == 1:
            return 37

        elif Pclass == 2:
            return 29

        else:
            return 24

    else:
        return Age


#

# In[88]:


train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)


# 

# In[89]:


sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')


# 

# In[90]:


train.drop('Cabin',axis=1,inplace=True)


# In[91]:


train.head()


# In[92]:


train.dropna(inplace=True)


# ## Converting Categorical Features 
# 
# 

# In[93]:


train.info()


# In[94]:


sex = pd.get_dummies(train['Sex'],drop_first=True)
embark = pd.get_dummies(train['Embarked'],drop_first=True)


# In[95]:


train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)


# In[96]:


train = pd.concat([train,sex,embark],axis=1)


# In[97]:


train.head()


# 
# 
# ## Train Test Split

# In[98]:


from sklearn.model_selection import train_test_split


# In[100]:


X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1), 
                                                    train['Survived'], test_size=0.30, 
                                                    random_state=101)


# ## Training and Predicting

# In[101]:


from sklearn.linear_model import LogisticRegression


# In[102]:


logmodel = LogisticRegression()
logmodel.fit(X_train,y_train)


# In[103]:


predictions = logmodel.predict(X_test)


# 

# ## Evaluation

# 

# In[104]:


from sklearn.metrics import classification_report


# In[105]:


print(classification_report(y_test,predictions))
#
#
